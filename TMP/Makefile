#############################################################################
# Makefile for building: SnowLINUX
# Generated by qmake (1.07a) (Qt 3.3.8b) on: Thu Dec 17 20:55:33 2015
# Project:  SnowLINUX.pro
# Template: app
# Command: $(QMAKE) -o Makefile SnowLINUX.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fno-strict-aliasing  -DQT_NO_DEBUG -DQT_SHARED -DQT_TABLET_SUPPORT -DQT_THREAD_SUPPORT
CXXFLAGS = -pipe -Wall -W -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fno-strict-aliasing  -DQT_NO_DEBUG -DQT_SHARED -DQT_TABLET_SUPPORT -DQT_THREAD_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/usr/lib64/qt-3.3/mkspecs/default -I. -I$(QTDIR)/include
LINK     = g++
LFLAGS   = 
LIBS     = $(SUBLIBS) -L$(QTDIR)/lib -lqt-mt -lXext -lX11 -lm
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = ./

####### Files

HEADERS = mainwindow.h \
		newdialog.h \
		missionbar.h \
		global.h \
		global_t.h \
		global_f.h \
		missioncheck.h
SOURCES = main.cpp \
		mainwindow.cpp \
		newdialog.cpp \
		missionbar.cpp \
		global.cpp \
		missioncheck.cpp \
		global_f.cpp
OBJECTS = main.o \
		mainwindow.o \
		newdialog.o \
		missionbar.o \
		global.o \
		missioncheck.o \
		global_f.o \
		mainwindow.o \
		newDlg.o \
		missionBar.o
FORMS = mainwindow.ui \
		newDlg.ui \
		missionBar.ui
UICDECLS = mainwindow.h \
		newDlg.h \
		missionBar.h
UICIMPLS = mainwindow.cpp \
		newDlg.cpp \
		missionBar.cpp
SRCMOC   = moc_mainwindow.cpp \
		moc_newdialog.cpp \
		moc_missionbar.cpp \
		moc_missioncheck.cpp \
		moc_mainwindow.cpp \
		moc_newDlg.cpp \
		moc_missionBar.cpp
OBJMOC = moc_mainwindow.o \
		moc_newdialog.o \
		moc_missionbar.o \
		moc_missioncheck.o \
		moc_mainwindow.o \
		moc_newDlg.o \
		moc_missionBar.o
DIST	   = SnowLINUX.pro
QMAKE_TARGET = SnowLINUX
DESTDIR  = 
TARGET   = SnowLINUX

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(OBJCOMP) $(LIBS)

mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )

Makefile: SnowLINUX.pro  /usr/lib64/qt-3.3/mkspecs/default/qmake.conf /usr/lib64/qt-3.3/lib/libqt-mt.prl
	$(QMAKE) -o Makefile SnowLINUX.pro
qmake: 
	@$(QMAKE) -o Makefile SnowLINUX.pro

dist: 
	@mkdir -p .tmp/SnowLINUX && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .tmp/SnowLINUX/ && ( cd `dirname .tmp/SnowLINUX` && $(TAR) SnowLINUX.tar SnowLINUX && $(GZIP) SnowLINUX.tar ) && $(MOVE) `dirname .tmp/SnowLINUX`/SnowLINUX.tar.gz . && $(DEL_FILE) -r .tmp/SnowLINUX

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:
	-$(DEL_FILE) $(UICIMPLS) $(UICDECLS)

yaccclean:
lexclean:
clean: mocclean uiclean
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)


FORCE:

####### Compile

main.o: main.cpp mainwindow.h \
		newdialog.h \
		global.h \
		global_f.h \
		missionbar.h \
		missioncheck.h \
		global_t.h

mainwindow.o: mainwindow.cpp mainwindow.h \
		newdialog.h \
		global.h \
		global_f.h \
		missionbar.h \
		missioncheck.h \
		global_t.h \
		mainwindow.h

newdialog.o: newdialog.cpp newdialog.h \
		missionbar.h \
		global.h \
		mainwindow.h \
		missioncheck.h \
		global_t.h

missionbar.o: missionbar.cpp missionbar.h \
		global.h \
		global_t.h \
		missioncheck.h

global.o: global.cpp global_t.h \
		missionbar.h \
		missioncheck.h

missioncheck.o: missioncheck.cpp missioncheck.h \
		global.h \
		global_t.h \
		missionbar.h

global_f.o: global_f.cpp global_t.h \
		global.h \
		missionbar.h \
		missioncheck.h

mainwindow.h: mainwindow.ui 
	$(UIC) mainwindow.ui -o mainwindow.h

mainwindow.cpp: mainwindow.h mainwindow.ui 
	$(UIC) mainwindow.ui -i mainwindow.h -o mainwindow.cpp

newDlg.h: newDlg.ui 
	$(UIC) newDlg.ui -o newDlg.h

newDlg.cpp: newDlg.h newDlg.ui 
	$(UIC) newDlg.ui -i newDlg.h -o newDlg.cpp

missionBar.h: missionBar.ui 
	$(UIC) missionBar.ui -o missionBar.h

missionBar.cpp: missionBar.h missionBar.ui 
	$(UIC) missionBar.ui -i missionBar.h -o missionBar.cpp

mainwindow.o: mainwindow.cpp mainwindow.h \
		newdialog.h \
		global.h \
		global_f.h \
		missionbar.h \
		missioncheck.h \
		global_t.h \
		mainwindow.h

newDlg.o: newDlg.cpp newDlg.h

missionBar.o: missionBar.cpp missionBar.h

moc_mainwindow.o: moc_mainwindow.cpp  mainwindow.h missionbar.h \
		missioncheck.h

moc_newdialog.o: moc_newdialog.cpp  newdialog.h mainwindow.h \
		missionbar.h \
		missioncheck.h

moc_missionbar.o: moc_missionbar.cpp  missionbar.h 

moc_missioncheck.o: moc_missioncheck.cpp  missioncheck.h 

moc_mainwindow.o: moc_mainwindow.cpp  mainwindow.h missionbar.h \
		missioncheck.h

moc_newDlg.o: moc_newDlg.cpp  newDlg.h 

moc_missionBar.o: moc_missionBar.cpp  missionBar.h 

moc_mainwindow.cpp: $(MOC) mainwindow.h
	$(MOC) mainwindow.h -o moc_mainwindow.cpp

moc_newdialog.cpp: $(MOC) newdialog.h
	$(MOC) newdialog.h -o moc_newdialog.cpp

moc_missionbar.cpp: $(MOC) missionbar.h
	$(MOC) missionbar.h -o moc_missionbar.cpp

moc_missioncheck.cpp: $(MOC) missioncheck.h
	$(MOC) missioncheck.h -o moc_missioncheck.cpp

moc_mainwindow.cpp: $(MOC) mainwindow.h
	$(MOC) mainwindow.h -o moc_mainwindow.cpp

moc_newDlg.cpp: $(MOC) newDlg.h
	$(MOC) newDlg.h -o moc_newDlg.cpp

moc_missionBar.cpp: $(MOC) missionBar.h
	$(MOC) missionBar.h -o moc_missionBar.cpp

####### Install

install:  

uninstall:  

